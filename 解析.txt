Project A

kv/storage/storage.go               定义了projectA1 需要实现的接口
kv/storage/modify.go                定义了Put和Delete 操作的数据形态
kv/util/engine_util/util.go         定义了一使用Badger 进行读写的封装
kv/util/engine_util/engines.go      定义了封装的数据库struct 以及一些基本的方法
kv/util/engine_util/cf_iterator.go  定义了Item 以及Iterator 相关的内容

kv/server/raw_api.go                定义了projectA2 需要实现的接口
kv/server/server.go                 有关上层服务
proto/pkg/kvrpcpb/kvrpcpb.pb.go     上层服务request和response的定义


Project B

不要在 Raft 模块本身中设置计时器，上层应用程序负责通过调用 RawNode.Tick () 来推进逻辑时钟
与论文中不同，本次实现，Heartbeat和AppendEntries作为不同的消息
node包含raft，raft包含raftlog，raftlog包含storage


raft/raft.go                        定义了Raft的核心内容（需要补充代码）
raft/log.go                         定义了RaftLog的核心内容（需要补充代码）
raft/rawnode.go                     定义了Node的核心内容（需要补充代码）                
proto/proto/eraftpb.proto           定义了Raft发送和接受信息相关的struct
raft/doc.go                         包含了总体设计以及MessageTypes各自职能
kv/raftstore/node.go                定义了有关raft节点的结构以及一些方法




To Deal With:
    Follower何时更新自己的lead
    称为leader后Prs[i].Match何时初始化